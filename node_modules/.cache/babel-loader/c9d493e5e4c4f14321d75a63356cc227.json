{"ast":null,"code":"import _slicedToArray from \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/NumberInput.tsx\";\nimport React, { useState } from \"react\";\n\nfunction NumberInput(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        touched = _useState2[0],\n        setTouch = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        htmlClass = _useState6[0],\n        setHtmlClass = _useState6[1];\n\n  const _useState7 = useState(0),\n        _useState8 = _slicedToArray(_useState7, 2),\n        setValue = _useState8[1];\n\n  function onValueChanged(event) {\n    let elementValue = isNaN(Number(event.target.value)) ? 0 : Number(event.target.value);\n    let error = \"\",\n        validClass = \"\";\n\n    if (!error) {\n      var _ref = props.max != null && elementValue > props.max ? [\"Value can't be higher than \".concat(props.max, \" \"), \"is-invalid\"] : [\"\", \"is-valid\"];\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      error = _ref2[0];\n      validClass = _ref2[1];\n    }\n\n    if (!error) {\n      var _ref3 = props.min != null && elementValue < props.min ? [\"Value can't be lower than \".concat(props.min, \" \"), \"is-invalid\"] : [\"\", \"is-valid\"];\n\n      var _ref4 = _slicedToArray(_ref3, 2);\n\n      error = _ref4[0];\n      validClass = _ref4[1];\n    }\n\n    props.onChange({\n      value: elementValue,\n      error: error,\n      touched: touched,\n      field: props.field\n    });\n    setTouch(true);\n    setError(error);\n    setHtmlClass(validClass);\n    setValue(elementValue);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: props.id.toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, props.label), React.createElement(\"input\", {\n    value: props.value,\n    type: \"number\",\n    onChange: onValueChanged,\n    className: \"form-control \".concat(props.inputClass, \" \").concat(htmlClass),\n    id: \"id_\".concat(props.label),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), error ? React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, error) : null);\n}\n\nexport default NumberInput;","map":{"version":3,"sources":["/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/NumberInput.tsx"],"names":["React","useState","NumberInput","props","touched","setTouch","error","setError","htmlClass","setHtmlClass","setValue","onValueChanged","event","elementValue","isNaN","Number","target","value","validClass","max","min","onChange","field","id","toString","label","inputClass"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA6C,OAA7C;;AAGA,SAASC,WAAT,CAAqBC,KAArB,EAA2D;AAAA,oBAC3BF,QAAQ,CAAC,KAAD,CADmB;AAAA;AAAA,QAChDG,OADgD;AAAA,QACvCC,QADuC;;AAAA,qBAE7BJ,QAAQ,CAAC,EAAD,CAFqB;AAAA;AAAA,QAEhDK,KAFgD;AAAA,QAEzCC,QAFyC;;AAAA,qBAGrBN,QAAQ,CAAC,EAAD,CAHa;AAAA;AAAA,QAGhDO,SAHgD;AAAA,QAGrCC,YAHqC;;AAAA,qBAIlCR,QAAQ,CAAC,CAAD,CAJ0B;AAAA;AAAA,QAI9CS,QAJ8C;;AAOvD,WAASC,cAAT,CAAwBC,KAAxB,EAAoE;AAChE,QAAIC,YAAoB,GAAIC,KAAK,CAACC,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd,CAAP,CAAN,GAAsC,CAAtC,GAA0CF,MAAM,CAACH,KAAK,CAACI,MAAN,CAAaC,KAAd,CAA3E;AADgE,QAE3DX,KAF2D,GAErC,EAFqC;AAAA,QAEpDY,UAFoD,GAEjC,EAFiC;;AAIhE,QAAI,CAACZ,KAAL,EAAY;AAAA,iBACgBH,KAAK,CAACgB,GAAN,IAAa,IAAd,IAAuBN,YAAY,GAAIV,KAAK,CAACgB,GAA9C,GACtB,sCAA+BhB,KAAK,CAACgB,GAArC,QAA6C,YAA7C,CADsB,GACuC,CAAC,EAAD,EAAK,UAAL,CAFrD;;AAAA;;AACPb,MAAAA,KADO;AACAY,MAAAA,UADA;AAGX;;AAED,QAAI,CAACZ,KAAL,EAAY;AAAA,kBACgBH,KAAK,CAACiB,GAAN,IAAa,IAAd,IAAuBP,YAAY,GAAIV,KAAK,CAACiB,GAA9C,GACtB,qCAA8BjB,KAAK,CAACiB,GAApC,QAA4C,YAA5C,CADsB,GACsC,CAAC,EAAD,EAAK,UAAL,CAFpD;;AAAA;;AACPd,MAAAA,KADO;AACAY,MAAAA,UADA;AAGX;;AAEDf,IAAAA,KAAK,CAACkB,QAAN,CAAe;AAAEJ,MAAAA,KAAK,EAAEJ,YAAT;AAAuBP,MAAAA,KAAK,EAAEA,KAA9B;AAAqCF,MAAAA,OAAO,EAAEA,OAA9C;AAAuDkB,MAAAA,KAAK,EAAEnB,KAAK,CAACmB;AAApE,KAAf;AAEAjB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACS,UAAD,CAAZ;AACAR,IAAAA,QAAQ,CAACG,YAAD,CAAR;AACH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAEV,KAAK,CAACoB,EAAN,CAASC,QAAT,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCrB,KAAK,CAACsB,KAA5C,CADJ,EAEI;AACI,IAAA,KAAK,EAAEtB,KAAK,CAACc,KADjB;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,QAAQ,EAAEN,cAHd;AAII,IAAA,SAAS,yBAAkBR,KAAK,CAACuB,UAAxB,cAAsClB,SAAtC,CAJb;AAKI,IAAA,EAAE,eAAQL,KAAK,CAACsB,KAAd,CALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAQKnB,KAAK,GACF;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KADL,CADE,GAGO,IAXjB,CADJ;AAgBH;;AAED,eAAeJ,WAAf","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { NumberInputProps } from \"../types/NumberInput.types\";\n\nfunction NumberInput(props: NumberInputProps): JSX.Element {\n    const [touched, setTouch] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [htmlClass, setHtmlClass] = useState(\"\");\n    const [, setValue] = useState(0);\n\n\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\n        let elementValue: number = (isNaN(Number(event.target.value))) ? 0 : Number(event.target.value);\n        let [error, validClass] = [\"\", \"\"];\n\n        if (!error) {\n            [error, validClass] = ((props.max != null) && elementValue > (props.max)) ?\n            [`Value can't be higher than ${props.max} `, \"is-invalid\"] : [\"\", \"is-valid\"];\n        }\n\n        if (!error) {\n            [error, validClass] = ((props.min != null) && elementValue < (props.min)) ?\n            [`Value can't be lower than ${props.min} `, \"is-invalid\"] : [\"\", \"is-valid\"];\n        }\n\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\n\n        setTouch(true);\n        setError(error);\n        setHtmlClass(validClass);\n        setValue(elementValue);\n    }\n\n    return (\n        <div>\n            <label htmlFor={props.id.toString()}>{props.label}</label>\n            <input\n                value={props.value}\n                type=\"number\"\n                onChange={onValueChanged}\n                className={`form-control ${props.inputClass} ${htmlClass}`}\n                id={`id_${props.label}`}/>\n            {error ?\n                <div className=\"invalid-feedback\">\n                    {error}\n                </div> : null\n            }\n        </div>\n    );\n}\n\nexport default NumberInput;"]},"metadata":{},"sourceType":"module"}