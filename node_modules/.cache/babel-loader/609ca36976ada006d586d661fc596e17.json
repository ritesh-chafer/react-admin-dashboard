{"ast":null,"code":"import _slicedToArray from \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/Select.tsx\";\nimport React, { useState, Fragment } from \"react\";\n\nfunction SelectInput(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        touched = _useState2[0],\n        setTouch = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        htmlClass = _useState6[0],\n        setHtmlClass = _useState6[1];\n\n  const _useState7 = useState(props.value),\n        _useState8 = _slicedToArray(_useState7, 2),\n        value = _useState8[0],\n        setValue = _useState8[1];\n\n  function onValueChanged(event) {\n    let _ref = [\"\", \"\", event.target.value],\n        error = _ref[0],\n        validClass = _ref[1],\n        elementValue = _ref[2];\n\n    var _ref2 = !elementValue && props.required ? [\"Value has to be selected\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    error = _ref3[0];\n    validClass = _ref3[1];\n    props.onChange({\n      value: elementValue,\n      error: error,\n      touched: touched,\n      field: props.field\n    });\n    setTouch(true);\n    setError(error);\n    setHtmlClass(validClass);\n    setValue(elementValue);\n  }\n\n  const getOptions = props.options.map(option => {\n    return React.createElement(\"option\", {\n      key: option,\n      value: \"\".concat(option),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, option);\n  });\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"\".concat(props.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.label), React.createElement(\"select\", {\n    value: value,\n    id: \"\".concat(props.id),\n    className: \"form-control \".concat(props.inputClass ? props.inputClass : \"\", \" \").concat(htmlClass),\n    onChange: onValueChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Choose...\"), getOptions), error ? React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, error) : null);\n}\n\nexport default SelectInput;","map":{"version":3,"sources":["/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/Select.tsx"],"names":["React","useState","Fragment","SelectInput","props","touched","setTouch","error","setError","htmlClass","setHtmlClass","value","setValue","onValueChanged","event","target","validClass","elementValue","required","onChange","field","getOptions","options","map","option","id","label","inputClass"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAuCC,QAAvC,QAAuD,OAAvD;;AAGA,SAASC,WAAT,CAAqBC,KAArB,EAAsD;AAAA,oBACtBH,QAAQ,CAAC,KAAD,CADc;AAAA;AAAA,QAC3CI,OAD2C;AAAA,QAClCC,QADkC;;AAAA,qBAExBL,QAAQ,CAAC,EAAD,CAFgB;AAAA;AAAA,QAE3CM,KAF2C;AAAA,QAEpCC,QAFoC;;AAAA,qBAGhBP,QAAQ,CAAC,EAAD,CAHQ;AAAA;AAAA,QAG3CQ,SAH2C;AAAA,QAGhCC,YAHgC;;AAAA,qBAIxBT,QAAQ,CAACG,KAAK,CAACO,KAAP,CAJgB;AAAA;AAAA,QAI3CA,KAJ2C;AAAA,QAIpCC,QAJoC;;AAOlD,WAASC,cAAT,CAAwBC,KAAxB,EAAqE;AAAA,eACzB,CAAC,EAAD,EAAK,EAAL,EAASA,KAAK,CAACC,MAAN,CAAaJ,KAAtB,CADyB;AAAA,QAC5DJ,KAD4D;AAAA,QACrDS,UADqD;AAAA,QACzCC,YADyC;;AAAA,gBAG1C,CAACA,YAAD,IAAiBb,KAAK,CAACc,QAAxB,GAClB,CAAC,0BAAD,EAA6B,YAA7B,CADkB,GAC2B,CAAC,EAAD,EAAK,UAAL,CAJgB;;AAAA;;AAGhEX,IAAAA,KAHgE;AAGzDS,IAAAA,UAHyD;AAOjEZ,IAAAA,KAAK,CAACe,QAAN,CAAe;AAAER,MAAAA,KAAK,EAAEM,YAAT;AAAuBV,MAAAA,KAAK,EAAEA,KAA9B;AAAqCF,MAAAA,OAAO,EAAEA,OAA9C;AAAuDe,MAAAA,KAAK,EAAEhB,KAAK,CAACgB;AAApE,KAAf;AAEAd,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACM,UAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAACK,YAAD,CAAR;AACH;;AAED,QAAMI,UAAkC,GAAGjB,KAAK,CAACkB,OAAN,CAAcC,GAAd,CAAkBC,MAAM,IAAI;AACnE,WACI;AAAQ,MAAA,GAAG,EAAEA,MAAb;AAAqB,MAAA,KAAK,YAAKA,MAAL,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CA,MAA1C,CADJ;AAGH,GAJ0C,CAA3C;AAMA,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,YAAKpB,KAAK,CAACqB,EAAX,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCrB,KAAK,CAACsB,KAAtC,CADJ,EAEI;AACI,IAAA,KAAK,EAAEf,KADX;AAEI,IAAA,EAAE,YAAKP,KAAK,CAACqB,EAAX,CAFN;AAGI,IAAA,SAAS,yBAAkBrB,KAAK,CAACuB,UAAN,GAAmBvB,KAAK,CAACuB,UAAzB,GAAsC,EAAxD,cAA8DlB,SAA9D,CAHb;AAII,IAAA,QAAQ,EAAEI,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALJ,EAMKQ,UANL,CAFJ,EAWKd,KAAK,GACF;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KADL,CADE,GAGO,IAdjB,CADJ;AAmBH;;AAED,eAAeJ,WAAf","sourcesContent":["import React, { useState, ChangeEvent, Fragment } from \"react\";\nimport { SelectProps } from \"../types/Select.types\";\n\nfunction SelectInput(props: SelectProps): JSX.Element {\n    const [touched, setTouch] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [htmlClass, setHtmlClass] = useState(\"\");\n    const [value, setValue] = useState(props.value);\n\n\n    function onValueChanged(event: ChangeEvent<HTMLSelectElement>): void {\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.value];\n\n        [error, validClass] = (!elementValue && props.required) ?\n            [\"Value has to be selected\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\n\n        setTouch(true);\n        setError(error);\n        setHtmlClass(validClass);\n        setValue(elementValue);\n    }\n\n    const getOptions: (JSX.Element | null)[] = props.options.map(option => {\n        return (\n            <option key={option} value={`${option}`}>{option}</option>\n        )\n    });\n\n    return (\n        <Fragment>\n            <label htmlFor={`${props.id}`}>{props.label}</label>\n            <select\n                value={value}\n                id={`${props.id}`}\n                className={`form-control ${props.inputClass ? props.inputClass : \"\"} ${htmlClass}`}\n                onChange={onValueChanged}>\n                <option value=\"\">Choose...</option>\n                {getOptions}\n            </select>\n\n            {error ?\n                <div className=\"invalid-feedback\">\n                    {error}\n                </div> : null\n            }\n        </Fragment>\n    );\n}\n\nexport default SelectInput;"]},"metadata":{},"sourceType":"module"}