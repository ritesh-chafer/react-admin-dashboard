{"ast":null,"code":"import _slicedToArray from \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/Checkbox.tsx\";\nimport React, { useState } from \"react\";\n\nfunction Checkbox(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        touched = _useState2[0],\n        setTouch = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        htmlClass = _useState6[0],\n        setHtmlClass = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        setValue = _useState8[1];\n\n  function onValueChanged(event) {\n    let _ref = [\"\", \"\", event.target.checked],\n        error = _ref[0],\n        validClass = _ref[1],\n        elementValue = _ref[2];\n\n    var _ref2 = !elementValue && props.required ? [\"Value has to be checked\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    error = _ref3[0];\n    validClass = _ref3[1];\n    props.onChange({\n      value: elementValue,\n      error: error,\n      touched: touched,\n      field: props.field\n    });\n    setTouch(true);\n    setError(error);\n    setHtmlClass(validClass);\n    setValue(elementValue);\n  }\n\n  return React.createElement(\"div\", {\n    className: \"form-check\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    className: \"form-check-input \".concat(props.inputClass ? props.inputClass : \"\", \" \").concat(htmlClass),\n    type: \"checkbox\",\n    id: \"id_\".concat(props.label),\n    checked: props.value,\n    onChange: onValueChanged,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"form-check-label\",\n    htmlFor: props.id.toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.label), error ? React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, error) : null);\n}\n\nexport default Checkbox;","map":{"version":3,"sources":["/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/Checkbox.tsx"],"names":["React","useState","Checkbox","props","touched","setTouch","error","setError","htmlClass","setHtmlClass","setValue","onValueChanged","event","target","checked","validClass","elementValue","required","onChange","value","field","inputClass","label","id","toString"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA6C,OAA7C;;AAGA,SAASC,QAAT,CAAkBC,KAAlB,EAAqD;AAAA,oBACrBF,QAAQ,CAAC,KAAD,CADa;AAAA;AAAA,QAC1CG,OAD0C;AAAA,QACjCC,QADiC;;AAAA,qBAEvBJ,QAAQ,CAAC,EAAD,CAFe;AAAA;AAAA,QAE1CK,KAF0C;AAAA,QAEnCC,QAFmC;;AAAA,qBAGfN,QAAQ,CAAC,EAAD,CAHO;AAAA;AAAA,QAG1CO,SAH0C;AAAA,QAG/BC,YAH+B;;AAAA,qBAI5BR,QAAQ,CAAC,KAAD,CAJoB;AAAA;AAAA,QAIxCS,QAJwC;;AAOjD,WAASC,cAAT,CAAwBC,KAAxB,EAAoE;AAAA,eACxB,CAAC,EAAD,EAAK,EAAL,EAASA,KAAK,CAACC,MAAN,CAAaC,OAAtB,CADwB;AAAA,QAC3DR,KAD2D;AAAA,QACpDS,UADoD;AAAA,QACxCC,YADwC;;AAAA,gBAGzC,CAACA,YAAD,IAAiBb,KAAK,CAACc,QAAxB,GAClB,CAAC,yBAAD,EAA4B,YAA5B,CADkB,GAC0B,CAAC,EAAD,EAAK,UAAL,CAJgB;;AAAA;;AAG/DX,IAAAA,KAH+D;AAGxDS,IAAAA,UAHwD;AAOhEZ,IAAAA,KAAK,CAACe,QAAN,CAAe;AAAEC,MAAAA,KAAK,EAAEH,YAAT;AAAuBV,MAAAA,KAAK,EAAEA,KAA9B;AAAqCF,MAAAA,OAAO,EAAEA,OAA9C;AAAuDgB,MAAAA,KAAK,EAAEjB,KAAK,CAACiB;AAApE,KAAf;AAEAf,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACM,UAAD,CAAZ;AACAL,IAAAA,QAAQ,CAACM,YAAD,CAAR;AACH;;AAED,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,SAAS,6BAAsBb,KAAK,CAACkB,UAAN,GAAmBlB,KAAK,CAACkB,UAAzB,GAAsC,EAA5D,cAAkEb,SAAlE,CADb;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,EAAE,eAAQL,KAAK,CAACmB,KAAd,CAHN;AAII,IAAA,OAAO,EAAEnB,KAAK,CAACgB,KAJnB;AAKI,IAAA,QAAQ,EAAER,cALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAoC,IAAA,OAAO,EAAER,KAAK,CAACoB,EAAN,CAASC,QAAT,EAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKrB,KAAK,CAACmB,KADX,CAPJ,EAWKhB,KAAK,GACF;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KADL,CADE,GAGO,IAdjB,CADJ;AAmBH;;AAED,eAAeJ,QAAf","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { CheckboxProps } from \"../types/Checkbox.types\";\n\nfunction Checkbox(props: CheckboxProps): JSX.Element {\n    const [touched, setTouch] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [htmlClass, setHtmlClass] = useState(\"\");\n    const [, setValue] = useState(false);\n\n\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.checked];\n\n        [error, validClass] = (!elementValue && props.required) ?\n            [\"Value has to be checked\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\n\n        setTouch(true);\n        setError(error);\n        setHtmlClass(validClass);\n        setValue(elementValue);\n    }\n\n    return (\n        <div className=\"form-check\">\n            <input\n                className={`form-check-input ${props.inputClass ? props.inputClass : \"\"} ${htmlClass}`}\n                type=\"checkbox\"\n                id={`id_${props.label}`}\n                checked={props.value}\n                onChange={onValueChanged} />\n            <label className=\"form-check-label\" htmlFor={props.id.toString()}>\n                {props.label}\n            </label>\n\n            {error ?\n                <div className=\"invalid-feedback\">\n                    {error}\n                </div> : null\n            }\n        </div>\n    );\n}\n\nexport default Checkbox;"]},"metadata":{},"sourceType":"module"}