{"ast":null,"code":"import _slicedToArray from \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/TextInput.tsx\";\nimport React, { useState } from \"react\";\n\nfunction TextInput(props) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        touched = _useState2[0],\n        setTouch = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        error = _useState4[0],\n        setError = _useState4[1];\n\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        htmlClass = _useState6[0],\n        setHtmlClass = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        setValue = _useState8[1];\n\n  function onValueChanged(event) {\n    let _ref = [\"\", \"\", event.target.value],\n        error = _ref[0],\n        validClass = _ref[1],\n        elementValue = _ref[2];\n\n    var _ref2 = !elementValue && props.required ? [\"Value cannot be empty\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n    var _ref3 = _slicedToArray(_ref2, 2);\n\n    error = _ref3[0];\n    validClass = _ref3[1];\n\n    if (!error) {\n      var _ref4 = props.maxLength && elementValue && elementValue.length > props.maxLength ? [\"Value can't have more than \".concat(props.maxLength, \" characters\"), \"is-invalid\"] : [\"\", \"is-valid\"];\n\n      var _ref5 = _slicedToArray(_ref4, 2);\n\n      error = _ref5[0];\n      validClass = _ref5[1];\n    }\n\n    props.onChange({\n      value: elementValue,\n      error: error,\n      touched: touched,\n      field: props.field\n    });\n    setTouch(true);\n    setError(error);\n    setHtmlClass(validClass);\n    setValue(elementValue);\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: props.id.toString(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, props.label), React.createElement(\"input\", {\n    value: props.value,\n    type: props.type,\n    onChange: onValueChanged,\n    className: \"form-control \".concat(props.inputClass, \" \").concat(htmlClass),\n    id: \"id_\".concat(props.label),\n    placeholder: props.placeholder,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), error ? React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, error) : null);\n}\n\nexport default TextInput;","map":{"version":3,"sources":["/home/chafer/Desktop/Project/Reactjs/react-admin-template-master/src/common/components/TextInput.tsx"],"names":["React","useState","TextInput","props","touched","setTouch","error","setError","htmlClass","setHtmlClass","setValue","onValueChanged","event","target","value","validClass","elementValue","required","maxLength","length","onChange","field","id","toString","label","type","inputClass","placeholder"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA6C,OAA7C;;AAGA,SAASC,SAAT,CAAmBC,KAAnB,EAAuD;AAAA,oBACvBF,QAAQ,CAAC,KAAD,CADe;AAAA;AAAA,QAC5CG,OAD4C;AAAA,QACnCC,QADmC;;AAAA,qBAEzBJ,QAAQ,CAAC,EAAD,CAFiB;AAAA;AAAA,QAE5CK,KAF4C;AAAA,QAErCC,QAFqC;;AAAA,qBAGjBN,QAAQ,CAAC,EAAD,CAHS;AAAA;AAAA,QAG5CO,SAH4C;AAAA,QAGjCC,YAHiC;;AAAA,qBAI9BR,QAAQ,CAAC,EAAD,CAJsB;AAAA;AAAA,QAI1CS,QAJ0C;;AAOnD,WAASC,cAAT,CAAwBC,KAAxB,EAAoE;AAAA,eACxB,CAAC,EAAD,EAAK,EAAL,EAASA,KAAK,CAACC,MAAN,CAAaC,KAAtB,CADwB;AAAA,QAC3DR,KAD2D;AAAA,QACpDS,UADoD;AAAA,QACxCC,YADwC;;AAAA,gBAGzC,CAACA,YAAD,IAAiBb,KAAK,CAACc,QAAxB,GAClB,CAAC,uBAAD,EAA0B,YAA1B,CADkB,GACwB,CAAC,EAAD,EAAK,UAAL,CAJkB;;AAAA;;AAG/DX,IAAAA,KAH+D;AAGxDS,IAAAA,UAHwD;;AAMhE,QAAI,CAACT,KAAL,EAAY;AAAA,kBACeH,KAAK,CAACe,SAAN,IAAmBF,YAAnB,IAAmCA,YAAY,CAACG,MAAb,GAAuBhB,KAAK,CAACe,SAAjE,GACtB,sCAA+Bf,KAAK,CAACe,SAArC,kBAA6D,YAA7D,CADsB,GACuD,CAAC,EAAD,EAAK,UAAL,CAFrE;;AAAA;;AACPZ,MAAAA,KADO;AACAS,MAAAA,UADA;AAGX;;AAEDZ,IAAAA,KAAK,CAACiB,QAAN,CAAe;AAAEN,MAAAA,KAAK,EAAEE,YAAT;AAAuBV,MAAAA,KAAK,EAAEA,KAA9B;AAAqCF,MAAAA,OAAO,EAAEA,OAA9C;AAAuDiB,MAAAA,KAAK,EAAElB,KAAK,CAACkB;AAApE,KAAf;AAEAhB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,QAAQ,CAACD,KAAD,CAAR;AACAG,IAAAA,YAAY,CAACM,UAAD,CAAZ;AACAL,IAAAA,QAAQ,CAACM,YAAD,CAAR;AACH;;AAED,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,OAAO,EAAEb,KAAK,CAACmB,EAAN,CAASC,QAAT,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAsCpB,KAAK,CAACqB,KAA5C,CADJ,EAEI;AACI,IAAA,KAAK,EAAErB,KAAK,CAACW,KADjB;AAEI,IAAA,IAAI,EAAEX,KAAK,CAACsB,IAFhB;AAGI,IAAA,QAAQ,EAAEd,cAHd;AAII,IAAA,SAAS,yBAAkBR,KAAK,CAACuB,UAAxB,cAAsClB,SAAtC,CAJb;AAKI,IAAA,EAAE,eAAQL,KAAK,CAACqB,KAAd,CALN;AAMI,IAAA,WAAW,EAAErB,KAAK,CAACwB,WANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EASKrB,KAAK,GACF;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,KADL,CADE,GAGO,IAZjB,CADJ;AAiBH;;AAED,eAAeJ,SAAf","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { TextInputProps } from \"../types/TextInput.types\";\n\nfunction TextInput(props: TextInputProps): JSX.Element {\n    const [touched, setTouch] = useState(false);\n    const [error, setError] = useState(\"\");\n    const [htmlClass, setHtmlClass] = useState(\"\");\n    const [, setValue] = useState(\"\");\n\n\n    function onValueChanged(event: ChangeEvent<HTMLInputElement>): void {\n        let [error, validClass, elementValue] = [\"\", \"\", event.target.value];\n\n        [error, validClass] = (!elementValue && props.required) ?\n            [\"Value cannot be empty\", \"is-invalid\"] : [\"\", \"is-valid\"];\n\n        if (!error) {\n            [error, validClass] = (props.maxLength && elementValue && elementValue.length > (props.maxLength)) ?\n            [`Value can't have more than ${props.maxLength} characters`, \"is-invalid\"] : [\"\", \"is-valid\"];\n        }\n\n        props.onChange({ value: elementValue, error: error, touched: touched, field: props.field });\n\n        setTouch(true);\n        setError(error);\n        setHtmlClass(validClass);\n        setValue(elementValue);\n    }\n\n    return (\n        <div>\n            <label htmlFor={props.id.toString()}>{props.label}</label>\n            <input\n                value={props.value}\n                type={props.type}\n                onChange={onValueChanged}\n                className={`form-control ${props.inputClass} ${htmlClass}`}\n                id={`id_${props.label}`}\n                placeholder={props.placeholder} />\n            {error ?\n                <div className=\"invalid-feedback\">\n                    {error}\n                </div> : null\n            }\n        </div>\n    );\n}\n\nexport default TextInput;"]},"metadata":{},"sourceType":"module"}